// src/hooks/useLaboratorySegments.ts
import { useState, useEffect, useRef } from 'react';
import { useDateRange } from '@/contexts/DateRangeContext';
import { usePharmacySelection } from '@/providers/PharmacyProvider';
import { useDataLoading } from '@/contexts/DataLoadingContext';

export interface Segment {
  id: string;
  name: string;
  universe: string;
  category: string;
  segment_type: string; // Type de segment (universe, category, etc.)
  product_count: number;
  total_revenue: number;
  total_margin: number;
  total_quantity: number;
  market_share: number;
  volume_share: number;
}

export interface LaboratorySegmentsData {
  laboratory: {
    id: string;
    name: string;
    total_revenue: number;
    total_margin: number;
    total_quantity: number;
    product_count: number;
  };
  segments: Segment[];
  isLoading: boolean;
  error: string | null;
}

export function useLaboratorySegments(laboratoryId: string): LaboratorySegmentsData {
  const [data, setData] = useState<LaboratorySegmentsData>({
    laboratory: {
      id: '',
      name: '',
      total_revenue: 0,
      total_margin: 0,
      total_quantity: 0,
      product_count: 0
    },
    segments: [],
    isLoading: false,
    error: null
  });
  
  // Contextes
  const { startDate, endDate } = useDateRange();
  const { selectedPharmacyIds } = usePharmacySelection();
  const { isReadyToLoad, createAbortSignal, incrementActiveRequests, decrementActiveRequests } = useDataLoading();
  
  // R√©f√©rence pour √©viter les appels multiples
  const isLoadingRef = useRef(false);
  
  useEffect(() => {
    // Ne se d√©clenche QUE si isReadyToLoad est true
    if (!isReadyToLoad) {
      return;
    }
    
    // V√©rifier les pr√©requis
    if (!laboratoryId || !startDate || !endDate) {
      console.log('üîç useLaboratorySegments: Pr√©requis manquants, pas de chargement');
      return;
    }
    
    // √âviter les appels multiples simultan√©s
    if (isLoadingRef.current) {
      console.log('üîç useLaboratorySegments: Chargement d√©j√† en cours, ignor√©');
      return;
    }
    
    fetchLaboratorySegments();
  }, [isReadyToLoad]); // IMPORTANT: Ne d√©pend QUE de isReadyToLoad
  
  const fetchLaboratorySegments = async () => {
    if (isLoadingRef.current) return;
    
    isLoadingRef.current = true;
    incrementActiveRequests();
    setData(prev => ({ ...prev, isLoading: true, error: null }));
    
    console.log('üîç useLaboratorySegments: D√©but du chargement des segments de laboratoire');
    
    try {
      const abortSignal = createAbortSignal();
      
      // Pr√©parer le corps de la requ√™te
      const requestBody = {
        startDate,
        endDate,
        pharmacyIds: selectedPharmacyIds.length > 0 ? selectedPharmacyIds : [],
        includeAllSegmentTypes: true 
      };
      
      // Effectuer la requ√™te POST
      const response = await fetch(`/api/laboratories/${laboratoryId}/segments`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
        cache: 'no-store',
        signal: abortSignal
      });
      
      // V√©rifier si la requ√™te a √©t√© annul√©e
      if (abortSignal.aborted) {
        console.log('üîç useLaboratorySegments: Requ√™te annul√©e');
        return;
      }
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Erreur lors de la r√©cup√©ration des donn√©es');
      }
      
      const result = await response.json();
      
      setData({
        laboratory: result.laboratory || {
          id: laboratoryId,
          name: '',
          total_revenue: 0,
          total_margin: 0,
          total_quantity: 0,
          product_count: 0
        },
        segments: result.segments || [],
        isLoading: false,
        error: null
      });
      
      console.log('‚úÖ useLaboratorySegments: Segments de laboratoire charg√©s avec succ√®s');
      
    } catch (error) {
      // Ne pas traiter l'erreur si la requ√™te a √©t√© annul√©e
      if (error instanceof Error && error.name === 'AbortError') {
        console.log('üîç useLaboratorySegments: Requ√™te annul√©e par AbortController');
        return;
      }
      
      console.error('‚ùå useLaboratorySegments: Erreur lors de la r√©cup√©ration des segments:', error);
      setData({
        laboratory: {
          id: laboratoryId,
          name: '',
          total_revenue: 0,
          total_margin: 0,
          total_quantity: 0,
          product_count: 0
        },
        segments: [],
        isLoading: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      });
    } finally {
      isLoadingRef.current = false;
      decrementActiveRequests();
    }
  };
  
  return data;
}