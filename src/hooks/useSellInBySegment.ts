// src/hooks/useSellInBySegment.ts
import { useState, useEffect, useRef } from 'react';
import { useDateRange } from '@/contexts/DateRangeContext';
import { usePharmacySelection } from '@/providers/PharmacyProvider';
import { useProductFilter } from '@/contexts/ProductFilterContext';
import { useDataLoading } from '@/contexts/DataLoadingContext';
import { SegmentType } from './useSegmentDistribution';

export interface SellInSegmentItem {
  segment: string;
  total_amount: number;
  total_quantity: number;
  product_count: number;
}

interface SellInBySegmentData {
  sellInData: SellInSegmentItem[];
  isLoading: boolean;
  error: string | null;
}

export function useSellInBySegment(segmentType: SegmentType = 'universe'): SellInBySegmentData {
  const [data, setData] = useState<SellInBySegmentData>({
    sellInData: [],
    isLoading: false,
    error: null
  });
  
  // Contextes
  const { startDate, endDate } = useDateRange();
  const { selectedPharmacyIds } = usePharmacySelection();
  const { selectedCodes, isFilterActive } = useProductFilter();
  const { isReadyToLoad, createAbortSignal, incrementActiveRequests, decrementActiveRequests } = useDataLoading();
  
  // R√©f√©rence pour √©viter les appels multiples
  const isLoadingRef = useRef(false);
  
  useEffect(() => {
    // Ne se d√©clenche QUE si isReadyToLoad est true
    if (!isReadyToLoad) {
      return;
    }
    
    // V√©rifier les pr√©requis
    if (!startDate || !endDate) {
      console.log('üîç useSellInBySegment: Dates manquantes, pas de chargement');
      return;
    }
    
    // √âviter les appels multiples simultan√©s
    if (isLoadingRef.current) {
      console.log('üîç useSellInBySegment: Chargement d√©j√† en cours, ignor√©');
      return;
    }
    
    fetchSellInBySegment();
  }, [isReadyToLoad]); // IMPORTANT: Ne d√©pend QUE de isReadyToLoad
  
  const fetchSellInBySegment = async () => {
    if (isLoadingRef.current) return;
    
    isLoadingRef.current = true;
    incrementActiveRequests();
    setData(prev => ({ ...prev, isLoading: true, error: null }));
    
    console.log('üîç useSellInBySegment: D√©but du chargement des donn√©es sell-in par segment');
    
    try {
      const abortSignal = createAbortSignal();
      
      // Utiliser POST pour les grandes listes de codes
      const response = await fetch('/api/sellin/by-segment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          startDate,
          endDate,
          segmentType,
          pharmacyIds: selectedPharmacyIds.length > 0 ? selectedPharmacyIds : [],
          code13refs: isFilterActive ? selectedCodes : []
        }),
        cache: 'no-store',
        signal: abortSignal
      });
      
      // V√©rifier si la requ√™te a √©t√© annul√©e
      if (abortSignal.aborted) {
        console.log('üîç useSellInBySegment: Requ√™te annul√©e');
        return;
      }
      
      if (!response.ok) {
        // Si l'API n'est pas encore impl√©ment√©e, renvoyer des donn√©es fictives
        if (response.status === 404) {
          // Donn√©es fictives pour d√©monstration
          const mockData = [
            { segment: 'M√©dicaments', total_amount: 125000, total_quantity: 2500, product_count: 150 },
            { segment: 'Parapharmacie', total_amount: 75000, total_quantity: 1500, product_count: 100 },
            { segment: 'Cosm√©tique', total_amount: 50000, total_quantity: 1000, product_count: 80 }
          ];
          
          setData({
            sellInData: mockData,
            isLoading: false,
            error: null
          });
          
          console.log('‚úÖ useSellInBySegment: Donn√©es fictives charg√©es (API 404)');
          return;
        }
        
        const errorData = await response.json();
        throw new Error(errorData.error || 'Erreur lors de la r√©cup√©ration des donn√©es');
      }
      
      const result = await response.json();
      
      setData({
        sellInData: result.distributions || [],
        isLoading: false,
        error: null
      });
      
      console.log('‚úÖ useSellInBySegment: Donn√©es sell-in par segment charg√©es avec succ√®s');
      
    } catch (error) {
      // Ne pas traiter l'erreur si la requ√™te a √©t√© annul√©e
      if (error instanceof Error && error.name === 'AbortError') {
        console.log('üîç useSellInBySegment: Requ√™te annul√©e par AbortController');
        return;
      }
      
      console.error('‚ùå useSellInBySegment: Erreur lors de la r√©cup√©ration des donn√©es:', error);
      
      // En cas d'erreur, utiliser des donn√©es fictives pour d√©monstration
      const mockData = [
        { segment: 'M√©dicaments', total_amount: 125000, total_quantity: 2500, product_count: 150 },
        { segment: 'Parapharmacie', total_amount: 75000, total_quantity: 1500, product_count: 100 },
        { segment: 'Cosm√©tique', total_amount: 50000, total_quantity: 1000, product_count: 80 }
      ];
      
      setData({
        sellInData: mockData,
        isLoading: false,
        error: null // Ne pas afficher l'erreur pour le moment
      });
      
      console.log('‚úÖ useSellInBySegment: Donn√©es fictives charg√©es (erreur)');
      
    } finally {
      isLoadingRef.current = false;
      decrementActiveRequests();
    }
  };
  
  return data;
}