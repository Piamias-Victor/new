// src/hooks/useProductStockEvolution.ts
import { useState, useEffect, useRef } from 'react';
import { useDateRange } from '@/contexts/DateRangeContext';
import { usePharmacySelection } from '@/providers/PharmacyProvider';
import { useDataLoading } from '@/contexts/DataLoadingContext';

export interface StockDataItem {
  period: string;
  stock: number;
  value: number;
  rupture_quantity: number;
  is_rupture: boolean;
}

interface ProductStockEvolutionState {
  data: StockDataItem[];
  isLoading: boolean;
  error: string | null;
}

/**
 * Hook personnalis√© pour r√©cup√©rer l'√©volution du stock d'un produit sp√©cifique
 */
export function useProductStockEvolution(
  code13ref: string,
  interval: 'day' | 'week' | 'month' = 'day'
): ProductStockEvolutionState {
  const [state, setState] = useState<ProductStockEvolutionState>({
    data: [],
    isLoading: false,
    error: null
  });
  
  // Contextes
  const { startDate, endDate } = useDateRange();
  const { selectedPharmacyIds } = usePharmacySelection();
  const { isReadyToLoad, createAbortSignal, incrementActiveRequests, decrementActiveRequests } = useDataLoading();
  
  // R√©f√©rence pour √©viter les appels multiples
  const isLoadingRef = useRef(false);
  
  useEffect(() => {
    // Ne se d√©clenche QUE si isReadyToLoad est true
    if (!isReadyToLoad) {
      return;
    }
    
    // V√©rifier les pr√©requis
    if (!startDate || !endDate || !code13ref) {
      console.log('üîç useProductStockEvolution: Pr√©requis manquants, pas de chargement');
      setState(prev => ({ ...prev, isLoading: false }));
      return;
    }
    
    // √âviter les appels multiples simultan√©s
    if (isLoadingRef.current) {
      console.log('üîç useProductStockEvolution: Chargement d√©j√† en cours, ignor√©');
      return;
    }
    
    fetchProductStockEvolution();
  }, [isReadyToLoad]); // IMPORTANT: Ne d√©pend QUE de isReadyToLoad
  
  const fetchProductStockEvolution = async () => {
    if (isLoadingRef.current) return;
    
    isLoadingRef.current = true;
    incrementActiveRequests();
    setState(prev => ({ ...prev, isLoading: true, error: null }));
    
    console.log('üîç useProductStockEvolution: D√©but du chargement de l\'√©volution du stock produit');
    
    try {
      const abortSignal = createAbortSignal();
      
      // Construire la requ√™te POST avec les param√®tres
      const response = await fetch('/api/products/stock-evolution', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          code13ref,
          startDate,
          endDate,
          interval,
          pharmacyIds: selectedPharmacyIds
        }),
        cache: 'no-store',
        signal: abortSignal
      });
      
      // V√©rifier si la requ√™te a √©t√© annul√©e
      if (abortSignal.aborted) {
        console.log('üîç useProductStockEvolution: Requ√™te annul√©e');
        return;
      }
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Erreur lors de la r√©cup√©ration des donn√©es de stock');
      }
      
      const result = await response.json();
      
      setState({
        data: result.data || [],
        isLoading: false,
        error: null
      });
      
      console.log('‚úÖ useProductStockEvolution: √âvolution du stock produit charg√©e avec succ√®s');
      
    } catch (error) {
      // Ne pas traiter l'erreur si la requ√™te a √©t√© annul√©e
      if (error instanceof Error && error.name === 'AbortError') {
        console.log('üîç useProductStockEvolution: Requ√™te annul√©e par AbortController');
        return;
      }
      
      console.error('‚ùå useProductStockEvolution: Erreur lors de la r√©cup√©ration des donn√©es:', error);
      setState({
        data: [],
        isLoading: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      });
    } finally {
      isLoadingRef.current = false;
      decrementActiveRequests();
    }
  };
  
  return state;
}