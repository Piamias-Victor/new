// src/hooks/usePharmacyStockEvolution.ts
import { useState, useEffect, useRef } from 'react';
import { useDateRange } from '@/contexts/DateRangeContext';
import { useProductFilter } from '@/contexts/ProductFilterContext';
import { useDataLoading } from '@/contexts/DataLoadingContext';

export interface StockDataItem {
  period: string;
  stockQuantity: number;
  stockValue: number;
  productsCount: number;
  ruptureQuantity: number;  // Quantit√© de produits en rupture
  isRupture: boolean;       // Indicateur de rupture pour cette p√©riode
}

interface PharmacyStockEvolutionState {
  data: StockDataItem[];
  isLoading: boolean;
  error: string | null;
}

/**
 * Hook personnalis√© pour r√©cup√©rer l'√©volution du stock d'une pharmacie sp√©cifique
 * Prend en compte la s√©lection de produits active et les ruptures de stock
 */
export function usePharmacyStockEvolution(
  pharmacyId: string,
  interval: 'day' | 'week' | 'month' = 'day'
): PharmacyStockEvolutionState {
  const [state, setState] = useState<PharmacyStockEvolutionState>({
    data: [],
    isLoading: false,
    error: null
  });
  
  // Contextes
  const { startDate, endDate } = useDateRange();
  const { selectedCodes, isFilterActive } = useProductFilter();
  const { isReadyToLoad, createAbortSignal, incrementActiveRequests, decrementActiveRequests } = useDataLoading();
  
  // R√©f√©rence pour √©viter les appels multiples
  const isLoadingRef = useRef(false);
  
  useEffect(() => {
    // Ne se d√©clenche QUE si isReadyToLoad est true
    if (!isReadyToLoad) {
      return;
    }
    
    // V√©rifier les pr√©requis
    if (!startDate || !endDate || !pharmacyId) {
      console.log('üîç usePharmacyStockEvolution: Pr√©requis manquants, pas de chargement');
      setState(prev => ({ ...prev, isLoading: false }));
      return;
    }
    
    // √âviter les appels multiples simultan√©s
    if (isLoadingRef.current) {
      console.log('üîç usePharmacyStockEvolution: Chargement d√©j√† en cours, ignor√©');
      return;
    }
    
    fetchPharmacyStockEvolution();
  }, [isReadyToLoad]); // IMPORTANT: Ne d√©pend QUE de isReadyToLoad
  
  const fetchPharmacyStockEvolution = async () => {
    if (isLoadingRef.current) return;
    
    isLoadingRef.current = true;
    incrementActiveRequests();
    setState(prev => ({ ...prev, isLoading: true, error: null }));
    
    console.log('üîç usePharmacyStockEvolution: D√©but du chargement de l\'√©volution du stock pharmacie');
    
    try {
      const abortSignal = createAbortSignal();
      
      // Utiliser une requ√™te POST si nous avons des codes EAN13 s√©lectionn√©s
      if (isFilterActive && selectedCodes.length > 0) {
        const response = await fetch(`/api/pharmacie/${pharmacyId}/stock/evolution`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            startDate,
            endDate,
            interval,
            code13refs: selectedCodes
          }),
          cache: 'no-store',
          signal: abortSignal
        });
        
        // V√©rifier si la requ√™te a √©t√© annul√©e
        if (abortSignal.aborted) {
          console.log('üîç usePharmacyStockEvolution: Requ√™te POST annul√©e');
          return;
        }
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Erreur lors de la r√©cup√©ration des donn√©es');
        }
        
        const result = await response.json();
        
        setState({
          data: result.data || [],
          isLoading: false,
          error: null
        });
      } else {
        // Sinon, utiliser une requ√™te GET
        const params = new URLSearchParams({
          startDate,
          endDate,
          interval
        });
        
        const response = await fetch(`/api/pharmacie/${pharmacyId}/stock/evolution?${params}`, {
          cache: 'no-store',
          signal: abortSignal
        });
        
        // V√©rifier si la requ√™te a √©t√© annul√©e
        if (abortSignal.aborted) {
          console.log('üîç usePharmacyStockEvolution: Requ√™te GET annul√©e');
          return;
        }
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Erreur lors de la r√©cup√©ration des donn√©es');
        }
        
        const result = await response.json();
        
        setState({
          data: result.data || [],
          isLoading: false,
          error: null
        });
      }
      
      console.log('‚úÖ usePharmacyStockEvolution: √âvolution du stock pharmacie charg√©e avec succ√®s');
      
    } catch (error) {
      // Ne pas traiter l'erreur si la requ√™te a √©t√© annul√©e
      if (error instanceof Error && error.name === 'AbortError') {
        console.log('üîç usePharmacyStockEvolution: Requ√™te annul√©e par AbortController');
        return;
      }
      
      console.error('‚ùå usePharmacyStockEvolution: Erreur lors de la r√©cup√©ration des donn√©es:', error);
      setState({
        data: [],
        isLoading: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      });
    } finally {
      isLoadingRef.current = false;
      decrementActiveRequests();
    }
  };
  
  return state;
}