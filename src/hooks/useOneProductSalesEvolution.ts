// src/hooks/useOneProductSalesEvolution.ts
import { useState, useEffect, useRef } from 'react';
import { useDateRange } from '@/contexts/DateRangeContext';
import { useDataLoading } from '@/contexts/DataLoadingContext';

export interface SalesDataItem {
  period: string;
  revenue: number;
  margin: number;
  margin_percentage: number;
}

interface ProductSalesEvolutionState {
  data: SalesDataItem[];
  isLoading: boolean;
  error: string | null;
}

/**
 * Hook personnalis√© pour r√©cup√©rer l'√©volution des ventes d'un produit sp√©cifique
 */
export function useOneProductSalesEvolution(
  code13ref: string,
  interval: 'day' | 'week' | 'month' = 'day'
): ProductSalesEvolutionState {
  const [state, setState] = useState<ProductSalesEvolutionState>({
    data: [],
    isLoading: false,
    error: null
  });
  
  // Contextes
  const { startDate, endDate } = useDateRange();
  const { isReadyToLoad, createAbortSignal, incrementActiveRequests, decrementActiveRequests } = useDataLoading();
  
  // R√©f√©rence pour √©viter les appels multiples
  const isLoadingRef = useRef(false);
  
  useEffect(() => {
    // Ne se d√©clenche QUE si isReadyToLoad est true
    if (!isReadyToLoad) {
      return;
    }
    
    // V√©rifier les pr√©requis
    if (!startDate || !endDate || !code13ref) {
      console.log('üîç useOneProductSalesEvolution: Pr√©requis manquants, pas de chargement');
      setState(prev => ({ ...prev, isLoading: false }));
      return;
    }
    
    // √âviter les appels multiples simultan√©s
    if (isLoadingRef.current) {
      console.log('üîç useOneProductSalesEvolution: Chargement d√©j√† en cours, ignor√©');
      return;
    }
    
    fetchProductSalesEvolution();
  }, [isReadyToLoad]); // IMPORTANT: Ne d√©pend QUE de isReadyToLoad
  
  const fetchProductSalesEvolution = async () => {
    if (isLoadingRef.current) return;
    
    isLoadingRef.current = true;
    incrementActiveRequests();
    setState(prev => ({ ...prev, isLoading: true, error: null }));
    
    console.log('üîç useOneProductSalesEvolution: D√©but du chargement de l\'√©volution des ventes produit');
    
    try {
      const abortSignal = createAbortSignal();
      
      // Construire les param√®tres pour la requ√™te
      const params = new URLSearchParams({
        startDate,
        endDate,
        interval
      });
      
      // Ajouter le code du produit
      params.append('code13refs', code13ref);
      
      // Effectuer la requ√™te
      const response = await fetch(`/api/sales/evolution?${params}`, {
        cache: 'no-store',
        signal: abortSignal
      });
      
      // V√©rifier si la requ√™te a √©t√© annul√©e
      if (abortSignal.aborted) {
        console.log('üîç useOneProductSalesEvolution: Requ√™te annul√©e');
        return;
      }
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Erreur lors de la r√©cup√©ration des donn√©es');
      }
      
      const result = await response.json();
      
      setState({
        data: result.data || [],
        isLoading: false,
        error: null
      });
      
      console.log('‚úÖ useOneProductSalesEvolution: √âvolution des ventes produit charg√©e avec succ√®s');
      
    } catch (error) {
      // Ne pas traiter l'erreur si la requ√™te a √©t√© annul√©e
      if (error instanceof Error && error.name === 'AbortError') {
        console.log('üîç useOneProductSalesEvolution: Requ√™te annul√©e par AbortController');
        return;
      }
      
      console.error('‚ùå useOneProductSalesEvolution: Erreur lors de la r√©cup√©ration des donn√©es:', error);
      setState({
        data: [],
        isLoading: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      });
    } finally {
      isLoadingRef.current = false;
      decrementActiveRequests();
    }
  };
  
  return state;
}